name: Build, Push and Deploy to Ubuntu Server М

on:
  # push:
  #   branches: [main] # Автоматичний деплой при пуші в main
  workflow_dispatch: # Можливість ручного запуску

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Дозвіл на публікацію в GitHub Container Registry

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # ghcr.io/volodymyr-bart/pdf-service

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    # Ця задача залежить від успішного завершення попередньої
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/volodymyr/projects/backend/pdf
            
            # Логінимось в GitHub Container Registry на сервері
            # Потрібно один раз виконати цю команду на сервері вручну або передати токен тут
            # echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Завантажуємо останню версію образу
            docker compose pull
            
            # Перезапускаємо контейнер з новим образом
            docker compose up -d --force-recreate
            
            # Очищуємо старі, невикористовувані образи (безпечніше ніж prune -af)
            docker image prune -f
          EOF