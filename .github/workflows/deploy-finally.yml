name: Build, Push and Deploy to Ubuntu Server V5 latest

on:
  push:
    branches: [ "main" ] # Рекомендую увімкнути для автоматизації
  workflow_dispatch: # Можливість ручного запуску

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- КРОКИ ДЛЯ МУЛЬТИ-АРХІТЕКТУРНОЇ ЗБІРКИ ---
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # --- КІНЕЦЬ ДОДАТКОВИХ КРОКІВ ---

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Автоматично приводить ім'я до нижнього регістру
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # --- ГОЛОВНЕ ВИПРАВЛЕННЯ ДЛЯ ВАШОГО СЕРВЕРА ---
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/volodymyr/projects/backend/pdf
            
            # --- НАДІЙНА АВТЕНТИФІКАЦІЯ ---
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker compose pull
            docker compose up -d
            docker image prune -f
          EOF